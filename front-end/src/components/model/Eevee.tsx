/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from 'react';
import { useFrame, useThree } from '@react-three/fiber';
//import { Quaternion, Euler, Vector3 } from 'three';
import { GridHelper, AxesHelper, BoxHelper } from 'three';
import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';
import * as THREE from 'three';

//props to pass in rotation through euler angles
interface EeveeProps {
  objRef: React.MutableRefObject<THREE.Group | undefined>;
  onLoad?: () => void;
}

export function Eevee({ objRef, onLoad }: EeveeProps) {
  const { scene } = useThree();
  const boxHelperRef = useRef<BoxHelper>();

  useFrame(() => {
    if (objRef.current) {
      // Add a random amount of rotation to the object each frame times delta
      // This is so the rotation is smooth and not dependent on the frame rate
      //const quaternion = new Quaternion();
      //quaternion.setFromAxisAngle(new Vector3(0, 1, 0), Math.random() * delta);
      // meshRef.current.rotation.x += Math.random() * delta;
      // meshRef.current.rotation.y += Math.random() * delta;
      // meshRef.current.rotation.z += Math.random() * delta;
      //meshRef.current.quaternion.multiply(quaternion);

      if (boxHelperRef.current) {
        boxHelperRef.current.update();
      }
    }
        
  });

  // Load the objects into the scene
  useEffect(() => {
    const loader = new OBJLoader();

    loader.load('/Eevee.obj', (object) => {
      // Add the loaded object to the scene
      scene.add(object);
      objRef.current = object;

      const boxHelper = boxHelperRef.current = new BoxHelper(object, 0xffff00);
      scene.add(boxHelper);

      console.log('Loaded Eevee');
      if (onLoad) onLoad();
    });

    const gridHelper = new GridHelper(1000, 100);
    gridHelper.position.y = -11;
    scene.add(gridHelper);

    const axesHelper = new AxesHelper(40);
    scene.add(axesHelper);

    // Cleanup on component unmount
    return () => {
      if (boxHelperRef.current) {
        scene.remove(boxHelperRef.current);
      }
      scene.remove(gridHelper);
      scene.remove(axesHelper);
    };
  }, [scene]);

  return (
    <group>
    </group>
  );
}